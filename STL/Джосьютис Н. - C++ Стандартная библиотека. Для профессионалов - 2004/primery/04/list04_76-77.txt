namespace std {
    template<> class numeric_limits<float> {
      public:
        // ƒа, дл€ float существует специализаци€ числовых пределов
        static const bool is_specialized = true;

        inline static float min() throw() {
            return 1.17549435E-38F;
        }

        inline static float max() throw() {
            return 3.40282347E+38F;
        }

        static const int digits = 24;
        static const int digits10 = 6;

        static const bool is_signed = true;
        static const bool is_integer = false;
        static const bool is_exact = false;
        static const bool is_bounded = true;
        static const bool is_modulo = false;
        static const bool is_iec559 = true;

        static const int radix = 2;

        inline static float epsilon() throw() {
            return 1.19209290E-07F;
        }

        static const float_round_style round_style
            = round_to_nearest;
        inline static float round_error() throw() {
            return 0.5F;
        }

        static const int min_exponent = -125;
        static const int max_exponent = +128;
        static const int min_exponent10 = -37;
        static const int max_exponent10 = +38;

        static const bool has_infinity = true;
        inline static float infinity() throw() { return Е; }
        static const bool has_quiet_NaN = true;
        inline static float quiet_NaN() throw() { return Е; }
        static const bool has_signaling_NaN = true;
        inline static float signaling_NaN() throw() { return Е; }
        static const float_denorm_style has_denorm = denorm_absent;
        static const bool has_denorm_loss = false;
        inline static float denorm_min() throw() { return min(); }

        static const bool traps = true;
        static const bool tinyness_before = true;
    };
}


