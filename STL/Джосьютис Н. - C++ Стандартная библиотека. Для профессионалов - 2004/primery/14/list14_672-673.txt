namespace std {
    class locale {
    public:
      // Глобальные объекты локальных контекстов
      static const locale& classic(); // Классический локальный контекст C
      static       locale  global(const locale&);  // Глобальное назначение
                                                   // локального контекста
      // Внутренние типы и значения
      class facet;
      class id;
      typedef int category;
      static const category none, numeric, time, monetary,
                            ctype, collate, messages, all;

      // Конструкторы
      locale() throw();
      explicit locale (const char* name);

      // Создание локального контекста на базе существующих контекстов
      locale (const locale& loc) throw();
      locale (const locale& loc, const char* name, category);
      template <class Facet>
        locate (const locale& loc, Facet* fp);
      locale (const locale& loc, const locale& loc2, category);

      // Оператор присваивания
      const locale& operator= (const locale& loc) throw();
      template <class Facet>
        locale combine (const locale& loc);

      // Деструктор
      ~locale() throw();

      // Имя (если есть)
      basic_string<char> name() const;

      // Сравнения
      bool operator== (const locale& loc) const;
      bool operator!= (const locale& loc) const;

      // Сортировка строк
      template <class charT, class Traits, class Allocator>
        bool operator() (
          const basic_string<charT,Traits,Allocator>& s1,
          const basic_string<charT,Traits,Allocator>& s2) const;
    };

    // Работа с фацетами
    template <class Facet>
      const Facet& use_facet (const locale&);
    template <class Facet>
      bool has_facet (const locale&) throw();
}


